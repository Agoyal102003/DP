Why Greedy slution will not work here?
ex  30 10 60 10 60 50
it will start greedy but will lost the track and hence will give the wrong soln.

// Approach 1 -> Recursion
int f(vector<int>& height, int index)
    {
        if(index==0) return 0;
        
        int left = f(height, index-1) + abs(height[index] - 
        height[index-1]);
        int right=INT_MAX;
        if(index>1)
        {
            right = f(height, index-2) + abs(height[index] - height[index-2]);
        }
    
        return min(left, right);
    }
    
    int minimumEnergy(vector<int>& height, int n) {
        // Code here
        return f(height, n-1);
    }

Approach 2 -> Memoization

int f(vector<int>& height, int index, vector<int> &dp)
    {
        if(index==0) return 0;
        if(dp[index]!=-1) return dp[index];
        
        int left = f(height, index-1, dp) + abs(height[index] - 
        height[index-1]);
        int right=INT_MAX;
        if(index>1)
        {
            right = f(height, index-2, dp) + abs(height[index] - height[index-2]);
        }

        return dp[index]=min(left, right);
    }
    
    int minimumEnergy(vector<int>& height, int n) {
        // Code here
        vector<int> dp(n+1, -1);
        return f(height, n-1, dp);
    }

Approach 3 -> Tabulation

int f(vector<int>& height, int index, vector<int> &dp)
    {
        dp[0]=0;
        
        for(int i=1; i<=index; i++)
        {
            int firststep = dp[i-1] + abs(height[i]-height[i-1]);
            int secondstep=INT_MAX;
            if(i>1)
            {
                secondstep = dp[i-2] + abs(height[i]-height[i-2]);
            }
            dp[i]= min(firststep, secondstep);
        }
        return dp[index];
    }
    
    int minimumEnergy(vector<int>& height, int n) {
        // Code here
        vector<int> dp(n+1, -1);
        return f(height, n-1, dp);
    }

Approach 4-> Space optimization

int f(vector<int>& height, int index, vector<int> &dp)
    {
        int prev1=0;
        int prev2=0;
        
        for(int i=1; i<=index; i++)
        {
            int firststep = prev1 + abs(height[i]-height[i-1]);
            int secondstep=INT_MAX;
            if(i>1)
            {
                secondstep = prev2 + abs(height[i]-height[i-2]);
            }
            prev2=prev1;
            prev1= min(firststep, secondstep);
        }
        return prev1;
    }
    
    int minimumEnergy(vector<int>& height, int n) {
        // Code here
        vector<int> dp(n+1, -1);
        return f(height, n-1, dp);
    }
