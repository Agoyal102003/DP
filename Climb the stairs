// How to know it's DP problem?
Whenever a question says count the number of ways or say find the best way

shortcut trick:-
1) Try to represent the problem in terms of index.
2) Do all stuffs on that stuff according to the problem statement
3) Sum of All the stuff -> Count all the ways
   min of al stuffs -> find min

Approach 1-> Recurssion

    int climbStairs(int n) {
        if(n==0 || n==1) return 1;
        int onestep= climbStairs(n-1);
        int twostep= climbStairs(n-2);

        return left+right;
    }

Approach 2-> Memoization 

// Memoization approach
int climbStairsMemo(int n, vector<int> &memo) {
    if (n == 0 || n == 1) {
        return 1;  // Base case
    }
    
    if (memo[n] != -1) {
        return memo[n];  // Return the previously computed value
    }
    
    memo[n] = climbStairsMemo(n - 1, memo) + climbStairsMemo(n - 2, memo);  // Store the result
    return memo[n];
}

int climbStairs(int n) {
    vector<int> memo(n + 1, -1);  // Initialize the memoization table with -1
    return climbStairsMemo(n, memo);
}

Approach 3 -> Tabulation

int climbStairsTabulation(int n) {
    if (n == 0 || n == 1) return 1;  // Base cases
    
    vector<int> dp(n + 1);
    dp[0] = 1;  // There's one way to climb 0 steps
    dp[1] = 1;  // There's one way to climb 1 step
    
    for (int i = 2; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2];  // State transition: current = one step before + two steps before
    }
    
    return dp[n];
}

Approach 4 -> Space optimization approach -> TC->O(N) && SC -> O(1)

int climbStairsOptimized(int n) {
    if (n == 0 || n == 1) return 1;
    
    int prev1 = 1, prev2 = 1, current;
    
    for (int i = 2; i <= n; i++) {
        current = prev1 + prev2;
        prev2 = prev1;
        prev1 = current;
    }
    
    return prev1;
}
