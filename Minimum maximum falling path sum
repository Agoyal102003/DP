// Approach 1 -> Recursive way

class Solution {
public:
    int f(int i, int j, vector<vector<int>>& matrix)
    {
        if(i==0) return matrix[i][j];

        if(j<0 || j >= matrix[0].size()) return INT_MAX;

        int up = f(i-1, j, matrix);
        int up_left = (j > 0) ? f(i-1, j-1, matrix) : INT_MAX;  // Left diagonal, only if j > 0
        int up_right = (j < matrix[0].size()-1) ? f(i-1, j+1, matrix) : INT_MAX;  // Right diagonal, only if j < n-1
        return matrix[i][j]+ min(up, min(up_left, up_right));
    }

    int minFallingPathSum(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        int minSum=INT_MAX;

        // Start the recursion from the last row and calculate the minimum falling path sum
        for (int j = 0; j < n; ++j) {
            minSum = min(minSum, f(m-1, j, matrix));
        }

        return minSum;
    }
};

// Approach 2 -> Memoization 

class Solution {
public:
    int f(int i, int j, vector<vector<int>>& matrix, vector<vector<int>>& dp)
    {
        if(i==0) return matrix[i][j];

        if(j<0 || j >= matrix[0].size()) return INT_MAX;
        if(dp[i][j]!=-1) return dp[i][j];
        int up = f(i-1, j, matrix, dp);
        int up_left = (j > 0) ? f(i-1, j-1, matrix, dp) : INT_MAX;  // Left diagonal, only if j > 0
        int up_right = (j < matrix[0].size()-1) ? f(i-1, j+1, matrix, dp) : INT_MAX;  // Right diagonal, only if j < n-1
        return dp[i][j]=matrix[i][j]+ min(up, min(up_left, up_right));
    }

    int minFallingPathSum(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        int minSum=INT_MAX;
        vector<vector<int>> dp(m, vector<int>(n, -1));

        // Start the recursion from the last row and calculate the minimum falling path sum
        for (int j = 0; j < n; ++j) {
            minSum = min(minSum, f(m-1, j, matrix, dp));
        }

        return minSum;
    }
};

// Approach 3 -> Tabulation 

class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        
        // Create dp table to store the minimum falling path sums
        vector<vector<int>> dp(m, vector<int>(n, 0));
        
        // Initialize the first row of dp with the same values as the matrix
        for (int j = 0; j < n; ++j) {
            dp[0][j] = matrix[0][j];
        }
        
        // Fill the dp table row by row
        for (int i = 1; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int up = dp[i-1][j];  // Directly above
                int up_left = (j > 0) ? dp[i-1][j-1] : INT_MAX;  // Left diagonal, only if j > 0
                int up_right = (j < n-1) ? dp[i-1][j+1] : INT_MAX;  // Right diagonal, only if j < n-1
                
                // Current cell value + minimum of the three possible moves
                dp[i][j] = matrix[i][j] + min(up, min(up_left, up_right));
            }
        }
        
        // Find the minimum value in the last row of dp
        int minSum = INT_MAX;
        for (int j = 0; j < n; ++j) {
            minSum = min(minSum, dp[m-1][j]);
        }
        
        return minSum;
    }
};
