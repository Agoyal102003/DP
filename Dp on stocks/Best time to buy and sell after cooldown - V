In this we have to wait for cooldown we can't directly buy just after we sold our existing stock. with this condition we have to maximize
the profit.

// Approach 1 -> Recursive way 
giving runtime error as it is leading to stack overflow maybe becoz of exponential calls

// Approach 2 -> Memoization 

class Solution {
public:
    int f(int index, int buy, vector<int>& prices, vector<vector<int>>& dp)
    {
        if(index>=prices.size()) 
        {
            return 0; 
        }
        
        if(dp[index][buy]!=-1) return dp[index][buy];
        int profit=0;
        if(buy==1)
        {
            profit= max(-prices[index] + f(index+1, 0, prices, dp), f(index+1, 1, prices, dp));
        }
        else{
            profit = max(prices[index] + f(index+2, 1, prices, dp), f(index+1, 0, prices, dp));
        }
        return dp[index][buy]=profit;
    }

    int maxProfit(vector<int>& prices) {
        vector<vector<int>> dp(prices.size(), vector<int>(2, -1));
        return f(0, 1, prices, dp);
    }
};
