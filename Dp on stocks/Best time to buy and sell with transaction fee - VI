In this you have to pay a fees everytime a transaction(buy and sell) has been completed

// Approach 1 -> Recursive way

class Solution {
public:
    int f(int index, int buy, vector<int>& prices, int fee)
    {
        if(index==prices.size()) 
        {
            return 0; 
        }
        int profit=0;

        if(buy==1)
        {
            profit= max(-prices[index] + f(index+1, 0, prices, fee), f(index+1, 1, prices, fee));
        }
        else{
            profit = max(prices[index] -fee + f(index+1, 1, prices, fee), f(index+1, 0, prices, fee));
        }
        return profit;
    }

    int maxProfit(vector<int>& prices, int fee) {
        return f(0, 1, prices, fee);
    }
};

// Approach 2 -> Memoization 

class Solution {
public:
    int f(int index, int buy, vector<int>& prices, vector<vector<int>>& dp, int fee)
    {
        if(index==prices.size()) 
        {
            return 0; 
        }
        int profit=0;
        if(dp[index][buy]!=-1) return dp[index][buy];

        if(buy==1)
        {
            profit= max(-prices[index] + f(index+1, 0, prices, dp, fee), f(index+1, 1, prices, dp, fee));
        }
        else{
            profit = max(prices[index]-fee + f(index+1, 1, prices, dp, fee), f(index+1, 0, prices, dp, fee));
        }
        return dp[index][buy]=profit;
    }


    int maxProfit(vector<int>& prices, int fee) {
        vector<vector<int>> dp(prices.size(), vector<int>(2, -1));
        return f(0, 1, prices, dp, fee);
    }
};
