Basically in this transactions are limited. u can't do infinite transactions. Atmost 2 transactions u can do.

// Approach 1-> Recursive way 

class Solution {
public:
    int f(int index, int buy, int cap, vector<int>& prices)
    {
        if(cap==0) return 0;
        if(index==prices.size()) 
        {
            return 0; 
        }
        int profit=0;

        if(buy==1)
        {
            profit= max(-prices[index] + f(index+1, 0, cap, prices), f(index+1, 1, cap, prices));
        }
        else{
            profit = max(prices[index] + f(index+1, 1, cap-1, prices), f(index+1, 0, cap, prices));
        }
        return profit;
    }


    int maxProfit(vector<int>& prices) {
        return f(0, 1, 2, prices);
    }
};

// Approach 2-> Memoization 

class Solution {
public:
    int f(int index, int buy, int cap, vector<int>& prices, vector<vector<vector<int>>>& dp)
    {
        if(cap==0) return 0;
        if(index==prices.size()) 
        {
            return 0; 
        }
        if(dp[index][buy][cap]!=-1) return dp[index][buy][cap];
        int profit=0;

        if(buy==1)
        {
            profit= max(-prices[index] + f(index+1, 0, cap, prices, dp), f(index+1, 1, cap, prices, dp));
        }
        else{
            profit = max(prices[index] + f(index+1, 1, cap-1, prices, dp), f(index+1, 0, cap, prices, dp));
        }
        return dp[index][buy][cap]=profit;
    }


    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(2, vector<int>(3, -1)));
        return f(0, 1, 2, prices, dp);
    }
};

// Approach 3-> Tabulation 

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(2, vector<int>(3, 0)));

        for(int i=0; i<n; i++)
        {
            for(int j=0; j<2; j++)
            {
                dp[i][j][0]=0;
            }
        }

        for(int index=n-1; index>=0; index--)
        {
            for(int buy=0; buy<2; buy++)
            {
                for(int cap=1; cap<3; cap++)
                {
                    int profit=0;

                    if(buy==1)
                    {
                        profit= max(-prices[index] + dp[index+1][0][cap],
                        dp[index+1][1][cap]);
                    }
                    else{
                        profit = max(prices[index] + dp[index+1][1][cap-1],
                        dp[index+1][0][cap]);
                    }
                    dp[index][buy][cap]=profit;
                }
            }
        }
        return dp[0][1][2];
    }
};
