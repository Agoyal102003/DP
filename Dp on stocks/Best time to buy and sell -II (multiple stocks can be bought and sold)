In this u can bought multiple stocks and sell it to maximize the profit but u can only buy a stock if u have already sold your previous(no buys can be consecutive)

// Approach 1-> Recursive way 

class Solution {
public:
    int f(int index, int buy, vector<int>& prices)
    {
        if(index==prices.size()) 
        {
            return 0; 
        }
        int profit=0;

        if(buy==1)
        {
            profit= max(-prices[index] + f(index+1, 0, prices), f(index+1, 1, prices));
        }
        else{
            profit = max(prices[index] + f(index+1, 1, prices), f(index+1, 0, prices));
        }
        return profit;
    }

    int maxProfit(vector<int>& prices) {
        return f(0, 1, prices);
    }
};

// Approach 2-> Memoization 

class Solution {
public:
    int f(int index, int buy, vector<int>& prices, vector<vector<int>>& dp)
    {
        if(index==prices.size()) 
        {
            return 0; 
        }
        int profit=0;
        if(dp[index][buy]!=-1) return dp[index][buy];

        if(buy==1)
        {
            profit= max(-prices[index] + f(index+1, 0, prices, dp), f(index+1, 1, prices, dp));
        }
        else{
            profit = max(prices[index] + f(index+1, 1, prices, dp), f(index+1, 0, prices, dp));
        }
        return dp[index][buy]=profit;
    }

    int maxProfit(vector<int>& prices) {
        vector<vector<int>> dp(prices.size(), vector<int>(2, -1));
        return f(0, 1, prices, dp);
    }
};

// Approach 3-> Tabulation 

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>> dp(n+1, vector<int>(2, 0));
        for(int i=0; i<2; i++) dp[n][i]=0;

        for(int index=n-1; index>=0; index--){
            for(int buy=0; buy<2; buy++)
            {
                int profit=0;
                if(buy==1)
                {
                    profit= max(-prices[index] + dp[index+1][0], 
                    dp[index+1][1]);
                }
                else{
                    profit = max(prices[index] + dp[index+1][1], 
                    dp[index+1][0]);
                }
                dp[index][buy]=profit;
            }
        }
        return dp[0][1];
    }
};

// Approach 4-> Space optimization 

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<int> prev(2, 0), cur(2, 0);
        for(int i=0; i<2; i++) prev[i]=0;

        for(int index=n-1; index>=0; index--){
            for(int buy=0; buy<2; buy++)
            {
                int profit=0;
                if(buy==1)
                {
                    profit= max(-prices[index] + prev[0], 
                    prev[1]);
                }
                else{
                    profit = max(prices[index] + prev[1], 
                    prev[0]);
                }
                cur[buy]=profit;
            }
            prev=cur;
        }
        return prev[1];
    }
};
