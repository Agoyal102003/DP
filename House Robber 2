This question was a slight modification of the max sum of non-adjacent elements. in this first and last house are also adjacent as they lie in a circle. and hence everything will remain 
same if we include weather first and exclude last and include last and exclude first and whoever gives the max sum gives the ans.

// Approach 1 -> 

int maxSum(vector<int>& nums)
    {
        if(nums.size()==0) return 0;
        if(nums.size()==1) return nums[0];
        // Initialize base cases
        int prev1 = nums[0];
        int prev2 = max(nums[0], nums[1]);

        for(int i=2; i<nums.size(); i++)
        {
            //pick
            int pick = nums[i] + prev1;
            //not pick 
            int notPick = prev2;
            prev1=prev2;
            prev2=max(pick, notPick);
        }
        return prev2;
    }

    int rob(vector<int>& nums) {
        vector<int> temp1, temp2;
        if(nums.size()==0) return 0;
        if(nums.size()==1) return nums[0];
        //including 1st
        for(int i=0; i<nums.size()-1; i++)
        {
            temp1.push_back(nums[i]);
        }
        //including last
        for(int i=1; i<nums.size(); i++)
        {
            temp2.push_back(nums[i]);
        }

        return max(maxSum(temp1), maxSum(temp2));
    }
