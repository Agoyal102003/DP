// Approach 1 -> Recurssive

int f(int n, vector<int>& arr, int& k)
    {
        if(n==0) return 0;
        int min_steps = INT_MAX;
        for(int i=1; i<=k; i++)
        {
            if(n-i >=0)
            {
                int jump= f(n-i, arr, k) + abs(arr[n]-arr[n-i]);
                min_steps = min(min_steps, jump);
            }
        }
        return min_steps;
    }
    int minimizeCost(vector<int>& arr, int& k) {
        // Code here
        int n=arr.size();
        return f(n-1, arr, k);
    }

Approach 2-> Memoization

 int f(int n, vector<int>& arr, int& k, vector<int>& dp)
    {
        if(n==0) return 0;
        if(dp[n]!=-1) return dp[n];
        
        int min_steps = INT_MAX;
        for(int i=1; i<=k; i++)
        {
            if(n-i >=0)
            {
                int jump= f(n-i, arr, k, dp) + abs(arr[n]-arr[n-i]);
                min_steps = min(min_steps, jump);
            }
        }
        return dp[n]=min_steps;
    }
    int minimizeCost(vector<int>& arr, int& k) {
        // Code here
        int n=arr.size();
        vector<int> dp(n+1, -1);
        return f(n-1, arr, k, dp);
    }

Approach 3-> Tabulation

int minimizeCost(vector<int>& arr, int k) {
    int n = arr.size();
    if (n == 0) return 0; // Handle edge case where array is empty

    vector<int> dp(n, 0);  // Initialize dp array

    // Fill the dp array
    for (int i = 1; i < n; i++) {
        dp[i] = INT_MAX;  // Start with maximum cost for each position
        
        // Check the last k positions to jump from
        for (int j = 1; j <= k; j++) {
            if (i - j >= 0) {  // Ensure we don't go out of bounds
                int jump = dp[i - j] + abs(arr[i] - arr[i - j]);  // Calculate the cost
                dp[i] = min(dp[i], jump);  // Update the minimum cost to reach i
            }
        }
    }

    return dp[n - 1];  // The minimum cost to reach the last element
}

Approach 4-> Space optimization Approach 

int minimizeCost(vector<int>& arr, int k) {
    int n = arr.size();
    if (n == 0) return 0; // Handle edge case where array is empty

    vector<int> dp(n);  // dp array to store minimum costs
    dp[0] = 0;          // No cost to reach the first element

    // Maintain a deque to store the minimum costs for the last k elements
    deque<pair<int, int>> minCosts; // Pair of (cost, index)
    minCosts.push_back({0, 0});      // Start with the first element

    for (int i = 1; i < n; i++) {
        // Calculate the minimum cost to reach dp[i]
        while (!minCosts.empty() && minCosts.front().second < i - k) {
            minCosts.pop_front();  // Remove indices that are out of the k range
        }

        // The front of the deque has the minimum cost for the last k positions
        int jumpCost = minCosts.front().first + abs(arr[i] - arr[minCosts.front().second]);
        dp[i] = jumpCost;

        // Maintain the deque to keep only relevant minimum costs
        while (!minCosts.empty() && minCosts.back().first >= dp[i]) {
            minCosts.pop_back();  // Remove elements that are not useful
        }

        minCosts.push_back({dp[i], i}); // Add the current index and cost
    }

    return dp[n - 1];  // Return the minimum cost to reach the last element
}
