// Approach 1 -> recursive way

int f(int i, int j)
    {
        if(i==0 && j==0)
        {
            return 1;
        }
        if(i<0 || j<0) return 0;
        int up= f(i-1, j);
        int left = f(i, j-1);

        return up+left;
    }

    int uniquePaths(int m, int n) {
        return f(m-1, n-1);
    }

// Approach 2 -> Memoization 

int f(int i, int j, vector<vector<int>>& dp)
    {
        if(i==0 && j==0)
        {
            return 1;
        }
        if(i<0 || j<0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int up= f(i-1, j, dp);
        int left = f(i, j-1, dp);

        return dp[i][j]=up+left;
    }

    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n, -1));
        return f(m-1, n-1, dp);
    }

// Approach 3 -> Tabulation 

int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n, 0));
        dp[0][0]=1;
        
        for(int row = 0; row<m; row++)
        {
            for(int col = 0; col<n; col++)
            {
                if(row==0 && col==0) continue;
                int up=0;
                int left=0;
                if(row>0) up= dp[row-1][col];
                if(col>0) left = dp[row][col-1];
                dp[row][col]=up+left;
            }
        }
        return dp[m-1][n-1];
    }
