// Approach 1 -> Recursive way 

class Solution {
public:
    int f(int ind1, int ind2, string& text1, string& text2)
    {
        if(ind1<0 || ind2<0) return 0;

        if(text1[ind1]==text2[ind2])
        {
            return 1 + f(ind1-1, ind2-1, text1, text2);
        }

        return max(f(ind1-1, ind2, text1, text2), f(ind1, ind2-1, text1, text2));
    }

    int longestCommonSubsequence(string text1, string text2) {
        return f(text1.size()-1, text2.size()-1, text1, text2);
    }
};

// Approach 2 -> Memoization  -> TC -> O(N*M)  SC -> O(N*M) + O(N+M)

class Solution {
public:
    int f(int ind1, int ind2, string& text1, string& text2, vector<vector<int>>& dp)
    {
        if(ind1<0 || ind2<0) return 0;
        if(dp[ind1][ind2]!=-1)
        return dp[ind1][ind2];

        if(text1[ind1]==text2[ind2])
        {
            return dp[ind1][ind2]=1 + f(ind1-1, ind2-1, text1, text2, dp);
        }

        return dp[ind1][ind2]= max(f(ind1-1, ind2, text1, text2, dp), f(ind1, ind2-1, text1, text2, dp));
    }

    int longestCommonSubsequence(string text1, string text2) {
        vector<vector<int>> dp(text1.size(), vector<int>(text2.size(), -1));
        return f(text1.size()-1, text2.size()-1, text1, text2, dp);
    }
};

// Approach 3 -> Tabulation 
For Tabulation shifting of index will takes place as we are dealing wit negative index i.e., as soon as index got negative return 0. and dp[negative] is not possible so we will just 
shift the index by 1

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        vector<vector<int>> dp(text1.size()+1, vector<int>(text2.size()+1, -1));

        for(int i=0; i<=text2.size(); i++)
        {
            dp[0][i]=0;
        }
        for(int i=0; i<=text1.size(); i++)
        {
            dp[i][0]=0;
        }
        for(int i=1; i<=text1.size(); i++)
        {
            for(int j=1; j<=text2.size(); j++)
            {
                if(text1[i-1]==text2[j-1])
                {
                    dp[i][j]=1 + dp[i-1][j-1];
                }
                else dp[i][j]= max(dp[i-1][j], dp[i][j-1]);
            }
        }
        return dp[text1.size()][text2.size()];
    }
};

// Approach 4 -> Space optimization 

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        vector<int> prev(text2.size()+1, 0), cur(text2.size()+1, 0);

        for(int i=0; i<=text2.size(); i++)
        {
            prev[i]=0;
        }
        for(int i=1; i<=text1.size(); i++)
        {
            for(int j=1; j<=text2.size(); j++)
            {
                if(text1[i-1]==text2[j-1])
                {
                   cur[j]=1 + prev[j-1];
                }
                else cur[j]= max(prev[j], cur[j-1]);
            }
            prev=cur;
        }
        return prev[text2.size()];
    }
};
